{"version":3,"file":"static/js/20096.fc69cb16.chunk.js","mappings":"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","sources":["../node_modules/marked/src/defaults.ts","../node_modules/marked/src/rules.ts","../node_modules/marked/src/helpers.ts","../node_modules/marked/src/Tokenizer.ts","../node_modules/marked/src/Lexer.ts","../node_modules/marked/src/Renderer.ts","../node_modules/marked/src/TextRenderer.ts","../node_modules/marked/src/Parser.ts","../node_modules/marked/src/Hooks.ts","../node_modules/marked/src/Instance.ts","../node_modules/marked/src/marked.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer; // set by the lexer\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  parser!: _Parser; // set by the parser\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): string {\n    return '';\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): string {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): string {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n`;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) : string {\n    return text;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): string {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n  }\n\n  hr(token: Tokens.Hr): string {\n    return '<hr>\\n';\n  }\n\n  list(token: Tokens.List): string {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(item: Tokens.ListItem): string {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n`;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">';\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): string {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n  }\n\n  table(token: Tokens.Table): string {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow({ text }: Tokens.TableRow): string {\n    return `<tr>\\n${text}</tr>\\n`;\n  }\n\n  tablecell(token: Tokens.TableCell): string {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): string {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n\n  em({ tokens }: Tokens.Em): string {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n\n  codespan({ text }: Tokens.Codespan): string {\n    return `<code>${escape(text, true)}</code>`;\n  }\n\n  br(token: Tokens.Br): string {\n    return '<br>';\n  }\n\n  del({ tokens }: Tokens.Del): string {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): string {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): string {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text);\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape) : string {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens)\n      : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong) {\n    return text;\n  }\n\n  em({ text }: Tokens.Em) {\n    return text;\n  }\n\n  codespan({ text }: Tokens.Codespan) {\n    return text;\n  }\n\n  del({ text }: Tokens.Del) {\n    return text;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) {\n    return text;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag) {\n    return text;\n  }\n\n  link({ text }: Tokens.Link) {\n    return '' + text;\n  }\n\n  image({ text }: Tokens.Image) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += '\\n' + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer | _TextRenderer = this.renderer): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: MarkedOptions['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret || '';\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions) {\n    return _Parser.parse(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions & { async: true }): Promise<string>;\n      (src: string, options: MarkedOptions & { async: false }): string;\n      (src: string, options?: MarkedOptions | null): string | Promise<string>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html) as string;\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n"],"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","arguments","length","undefined","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","concat","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_tag","_comment","html","paragraph","blockNormal","blockquote","code","fences","heading","newline","table","text","gfmTable","blockGfm","_objectSpread","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","inlineNormal","_backpedal","blockSkip","del","escape","reflinkSearch","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","escape2","html2","encode","test","cleanUrl","href","encodeURI","_unused","splitCells","tableRow","count","_cells$at","cells","match","offset","str","escaped","curr","split","i","trim","shift","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","outputLink","cap","link2","raw","lexer2","rules","title","state","inLink","token","type","tokens","inlineTokens","_Tokenizer","constructor","options2","_defineProperty","this","options","space","src","codeBlockStyle","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","lang","trimmed","depth","lexer","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","list2","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","ischecked","istask","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","tag2","toLowerCase","_cap$","headers","aligns","rows","item","header","align","row","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","indexOf","level","findClosingBracket","linkLen","links","emStrong","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","text2","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_this$rules$inline$_b","_this$rules$inline$_b2","inlineText","_Lexer","__Lexer","Object","create","inlineQueue","lex","lexInline","next","lastParagraphClipped","_this$options$extensi","_this$options$extensi2","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","_this$options$extensi3","_this$options$extensi4","startInline","_Renderer","_ref","_match","langString","_ref2","body","parser","parse","_ref3","_ref4","parseInline","j","listitem","itemBody","checkbox","_item$tokens$","unshift","_ref5","_ref6","tablecell","tablerow","k","_ref7","content","strong","_ref8","em","_ref9","_ref0","_ref1","_ref10","cleanHref","out","image","_ref11","textRenderer","_TextRenderer","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_Parser","__Parser","_this$options$extensi5","anyToken","renderers","genericToken","ret","textToken","_this$options$extensi6","_Hooks","_Class3","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Set","Marked","setOptions","parseMarkdown","use","callback","values","tableToken","listToken","_this$defaults$extens","defaults","childTokens","tokens2","flat","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","args2","_key2","apply","extLevel","prop","rendererProp","rendererFunc","_len3","_key3","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","ret2","_len5","_key5","walkTokens2","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","parser2","src2","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sourceRoot":""}