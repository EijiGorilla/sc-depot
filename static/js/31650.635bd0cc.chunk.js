"use strict";(self.webpackChunksc_depot=self.webpackChunksc_depot||[]).push([[29857,31650],{16525:(e,n,a)=>{a.d(n,{A:()=>s});var l=a(5262),t=a(27084);function i(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=[];if(n){for(const l of e)if(l.geometry){const e=l.geometry;a.push.apply(a,e.points)}}else a=e.map((e=>e.geometry));const t=[],i=[];let s=1/0,o=-1/0,r=0,c=0,u=0,f=0;for(const v of a){if(!v)continue;n?(t[0]=v[0],t[1]=v[1]):(t[0]=v.x,t[1]=v.y);let e=1/0,p=-1/0;for(const r of a){if(r===v)continue;if(!r)continue;n?(i[0]=r[0],i[1]=r[1]):(i[0]=r.x,i[1]=r.y);const a=(0,l.R3)(t,i);a>0&&(a<e&&(e=a),a<s&&(s=a),a>p&&(p=a),a>o&&(o=a))}e!==1/0&&(++u,r+=e),p!==-1/0&&(++f,c+=p)}return{minDistance:s!==1/0?s:null,maxDistance:o!==-1/0?o:null,avgMinDistance:u?r/u:null,avgMaxDistance:f?c/f:null}}function s(e){const{features:n}=e;let a=null;switch(e.geometryType){case"point":a=i(n);break;case"multipoint":a=i(n,!0);break;case"polyline":a=function(e){let n=0,a=0,t=1/0,i=-1/0;for(const s of e){const e=s.geometry;if(e){let s=0;for(const n of e.paths){const e=(0,l.Yl)(n);e>0&&(s+=e)}s>0&&(++n,a+=s,s<t&&(t=s),s>i&&(i=s))}}return{minLength:t!==1/0?t:null,maxLength:i!==-1/0?i:null,avgLength:n?a/n:null}}(n);break;case"polygon":a=function(e){let n=0,a=0,l=1/0,i=-1/0;for(const s of e){const e=s.geometry;if(e){const s=(0,t.v)(e);if(s){const e=Math.abs(s.xmax-s.xmin),t=Math.abs(s.ymax-s.ymin),o=Math.sqrt(e*t);o>0&&(++n,a+=o,o<l&&(l=o),o>i&&(i=o))}}}return{minSize:l!==1/0?l:null,maxSize:i!==-1/0?i:null,avgSize:n?a/n:null}}(n)}return Promise.resolve(a)}},29857:(e,n,a)=>{a.r(n),a.d(n,{default:()=>x});var l=a(89379),t=a(53986),i=a(50076),s=a(68002),o=a(16525),r=a(90494),c=a(11563);const u=["layer"],f=500,v=1e8,p=1280,m=12,g=30,w=15;async function d(e){const{view:n,sampleSize:a}=e;if(!e||!e.layer)throw new i.default("scale-range:missing-parameters","'layer' parameter is required");if(e.snapToLOD&&!n)throw new i.default("scale-range:missing-parameters","'view' parameter is required when 'snapToLOD' is true");e.forBinning&&(0,r.p)(e,"scale-range");const{layer:s}=e,o=(0,t.A)(e,u),v=e.forBinning?c.Mi:c.J4,p=(0,c.Jg)(s,v,e.forBinning);if(!p)throw new i.default("scale-range:invalid-parameters","'layer' must be one of these types: "+(0,c.Ho)(v).join(", "));const m=(0,l.A)({layerAdapter:p},o);m.sampleSize=a||f,await(null===n||void 0===n?void 0:n.when());const g=null!=m.signal?{signal:m.signal}:null;return await p.load(g),m}function y(e,n,a){var l,t;const i=function(e,n){const a=m,l=p/4,t=g,i=p/4,s=w,o=p/2;let r=0,c=0,u=0,f=0;switch(e){case"point":case"multipoint":{var v,d;const e=n;r=null!==(v=e.avgMinDistance)&&void 0!==v?v:0,c=a,u=null!==(d=e.minDistance)&&void 0!==d?d:0,f=l;break}case"polyline":{var y,h;const e=n;r=null!==(y=e.avgLength)&&void 0!==y?y:0,c=t,u=null!==(h=e.minLength)&&void 0!==h?h:0,f=i;break}case"polygon":{var S,x;const e=n;r=null!==(S=e.avgSize)&&void 0!==S?S:0,c=s,u=null!==(x=e.minSize)&&void 0!==x?x:0,f=o;break}}return{resolutionForMinScale:r>0?r/c:null,resolutionForMaxScale:u>0?u/f:null}}(e.geometryType,n),o=(null===a||void 0===a?void 0:a.spatialReference)||e.layer.spatialReference;return{minScale:(0,s.gB)(null!==(l=i.resolutionForMinScale)&&void 0!==l?l:0,o),maxScale:(0,s.gB)(null!==(t=i.resolutionForMaxScale)&&void 0!==t?t:0,o)}}function h(e,n){let a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(e.constraints&&"effectiveLODs"in e.constraints){const l=e.constraints.effectiveLODs,t=a?l:l.slice().reverse();let i=null;for(const e of t)if(!(a?e.scale>n:e.scale<n)){i=e;break}return i}}function S(e,n,a,l){const{view:t,snapToLOD:s,layerAdapter:o}=e;if(s&&t){const e=h(t,n),l=h(t,a,!1);n=e?e.scale:n,a=l?l.scale:a}if(n<a)throw new i.default("scale-range:invalid","calculated minScale is less than maxScale.");return a>n/2&&(a=Math.floor(a/2)),n>v&&(n=0),"polygon"!==o.geometryType&&(a=0),{minScale:Math.ceil(n),maxScale:Math.floor(a),spatialStatistics:l}}async function x(e){const n=await d(e),{view:a,sampleSize:l,layerAdapter:t,signal:s,filter:r}=n,c=await t.getSampleFeatures({view:a,sampleSize:l,returnGeometry:!0,filter:r,signal:s},"json");if(null===c||void 0===c||!c.length)throw new i.default("scale-range:insufficient-info","No features are available to calculate statistics");const u=await(0,o.A)({features:c,geometryType:t.geometryType}),{minScale:f,maxScale:v}=y(t,u,a);return S(n,f,v,u)}},31650:(e,n,a)=>{a.r(n),a.d(n,{default:()=>A});var l=a(89379),t=a(53986),i=(a(81806),a(50076)),s=a(76931),o=a(68002),r=a(43996),c=a(63040),u=a(29857),f=a(90494),v=a(11563);const p=["layer"],m=1e8,g=1128.497176,w=591657527.591555,d=[10,8,4,2],y=[100,100,60,30],h=[2,1,.75,.5],S=[32,18,12,6],x=[{level:0,resolution:156543.03392800014,scale:591657527.591555},{level:1,resolution:78271.51696399994,scale:295828763.795777},{level:2,resolution:39135.75848200009,scale:147914381.897889},{level:3,resolution:19567.87924099992,scale:73957190.948944},{level:4,resolution:9783.93962049996,scale:36978595.474472},{level:5,resolution:4891.96981024998,scale:18489297.737236},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},{level:11,resolution:76.43702828507324,scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,scale:1128.497176}];function z(e,n){const{view:a}=e;if(!a)throw new i.default("scale-range:invalid-parameters","'view' is required");const l=n.minScale||m,t=a.constraints&&"effectiveLODs"in a.constraints&&a.constraints.effectiveLODs||x,s=[];for(let i=0;i<t.length;i++){if(t[i].scale>l)continue;const e=Number(i),n=[e-3,e,e+3,e+6];for(const a of n)a>-1&&a<t.length&&s.push(t[a].scale);break}return s.sort(((e,n)=>e-n))}function b(e,n){const{view:a,layerAdapter:l}=e;if(!a)throw new i.default("scale-range:invalid-parameters","'view' is required");const t=l.fullExtent,s=l.minScale||g,r=l.maxScale||w,c=n.minScale||0,u=n.maxScale||0;let f=null!=t?(0,o.X_)(a,t):0;return f=f<s&&f>r?f:0,{scales:[s,r,c,u,f].map(Math.round).sort(((e,n)=>e-n)).filter(((e,n,a)=>!!e&&a.indexOf(e)===n)).filter(((e,n,a)=>!n||Math.abs(e-a[n-1])>5)),fullExtentScale:f}}function M(e,n){const{spatialStatistics:a,minScale:l,maxScale:t}=n;if(!("avgSize"in a)||!a.avgSize)throw new i.default("size-range:insufficient-info","average polygon size is invalid");const o=a.avgSize,{view:u}=e;if(!u)throw new i.default("scale-range:invalid-parameters","'view' is required");const{resolution:f,scale:v}=u,p=f/v,{scales:m,fullExtentScale:g}=b(e,{minScale:l,maxScale:t}),w=[],d=[];return m.forEach(((e,n)=>{const{min:a,max:l}=function(e,n){const a=Math.ceil(e/n);let l=Math.ceil(a/4);l<4?l=4:l>16&&(l=16);const t=5*l;return{min:l,max:t<50?50:t}}(o,p*e),t=m.indexOf(g),i=t>-1&&n>t?2:1;w.push(new c.default({value:e,size:(0,s.PN)(a/i)})),d.push(new c.default({value:e,size:(0,s.PN)(l/i)}))})),{minSize:new r.default({valueExpression:"$view.scale",stops:w}),maxSize:new r.default({valueExpression:"$view.scale",stops:d})}}async function A(e){const n=await async function(e){const{view:n}=e;if(!(e&&n&&e.layer))throw new i.default("size-range:missing-parameters","'view' and 'layer' parameters are required");e.forBinning&&(0,f.p)(e,"size-range");const{layer:a}=e,s=(0,t.A)(e,p),o=e.forBinning?v.Mi:v.J4,r=(0,v.Jg)(a,o,e.forBinning);if(!r)throw new i.default("size-range:invalid-parameters","'layer' must be one of these types: "+(0,v.Ho)(o).join(", "));const c=(0,l.A)((0,l.A)({layerAdapter:r},s),{},{view:n});await n.when();const u=null!=c.signal?{signal:c.signal}:null;await r.load(u);const m=r.geometryType;if("point"!==m&&"multipoint"!==m&&"polyline"!==m&&"polygon"!==m)throw new i.default("size-range:not-supported","sizeRange is not supported for geometryType: ".concat(m));return c}(e),{view:a,layerAdapter:o,signal:m,filter:g}=n,w=await(0,u.default)({layer:o,view:a,signal:m,filter:g});switch(o.geometryType){case"point":case"multipoint":return function(e,n){const{minScale:a,maxScale:l}=n,t=z(e,{minScale:a,maxScale:l});if(!t.length)throw new i.default("scale-range:insufficient-info","not enough scale values");return{minSize:new r.default({valueExpression:"$view.scale",stops:t.map(((e,n)=>new c.default({value:e,size:(0,s.PN)(d[n])})))}),maxSize:new r.default({valueExpression:"$view.scale",stops:t.map(((e,n)=>new c.default({value:e,size:(0,s.PN)(y[n])})))})}}(n,w);case"polyline":return function(e,n){const{minScale:a,maxScale:l}=n,t=z(e,{minScale:a,maxScale:l});if(!t.length)throw new i.default("scale-range:insufficient-info","not enough scale values");return{minSize:new r.default({valueExpression:"$view.scale",stops:t.map(((e,n)=>new c.default({value:e,size:(0,s.PN)(h[n])})))}),maxSize:new r.default({valueExpression:"$view.scale",stops:t.map(((e,n)=>new c.default({value:e,size:(0,s.PN)(S[n])})))})}}(n,w);case"polygon":return M(n,w);case"mesh":case"multipatch":return null}return null}},90494:(e,n,a)=>{a.d(n,{p:()=>i,z:()=>t});var l=a(50076);const t="aggregateCount";function i(e,n){if(!e.view)throw new l.default("".concat(n,":missing-parameters"),"'view' parameter is required for binning");if(e.sqlExpression)throw new l.default("".concat(n,":invalid-parameters"),"'sqlExpression' parameter is not supported for binning");if("3d"===e.view.type)throw new l.default("".concat(n,":invalid-parameters"),"3d view is not supported for binning")}}}]);
//# sourceMappingURL=31650.635bd0cc.chunk.js.map