{"version":3,"file":"static/js/46346.2a9f7523.chunk.js","mappings":"kKASA,MAAMA,EAA6B,CAE/BC,IAAK,kBACLC,QAAS,kBACTC,IAAK,gBACLC,IAAK,iBACLC,QAAS,mBACTC,IAAK,mBACLC,IAAK,kBACLC,IAAK,kBACLC,QAAS,iBACTC,QAAS,sBACTC,IAAK,iBAMHC,EAAY,MACd,MAAMC,EAA4BC,OAAOC,KAAKf,GAC9C,OAAOc,OAAOC,MAAKC,EAAAA,EAAAA,MAAmBC,QAAQC,IAAQL,EAA0BM,SAASD,IAC5F,EAHiB,GAOlB,SAASE,EAAUF,GAAI,IAAAG,EACnB,MAAMC,EAA0BtB,EAA2BkB,GAC3D,GAAII,EACA,OAAOA,EAEX,MAAMC,GAASC,EAAAA,EAAAA,GAAYN,GAC3B,OAAsB,QAAtBG,EAAa,OAANE,QAAM,IAANA,OAAM,EAANA,EAAQE,eAAO,IAAAJ,EAAAA,EAAIH,CAC9B,C,oGCrCA,MAAMQ,EAA4BC,GACvBA,EAAcC,KAAKC,IACtB,MAAM,MAAEC,GAAUD,EACZE,GAAYC,EAAAA,EAAAA,eAAcF,GAChC,OAAAG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOJ,GAAM,IACTE,iBAKZG,eAAeC,IACX,MAAMC,EAAW,GACXT,EAAgBf,EAAAA,EAAUgB,KAAKV,IAAE,CAAQY,MAAOZ,MAChDmB,EAAmBX,EAAyBC,GAClD,IAAK,MAAMW,KAAeD,EAAkB,CACxC,MAAM,MAAEP,EAAK,UAAEC,GAAcO,EAC7B,GAAIA,EAAYC,QACZ,SAEJD,EAAYC,SAAU,EACtB,MAAMC,EAAW,CACbV,MAAOC,EACPU,IAAK,CAAC,CAAEX,WAEZ,IAAK,MAAMY,KAAgBL,EAAiBpB,QAAQ0B,IAAOA,EAAEJ,UAAU,CACnE,MAAQT,MAAOc,EAAQb,UAAWc,GAAeH,EACjD,GAAIX,IAAcc,EAAY,CAC1B,MAAMhB,EAAS,CAAEC,MAAOc,GACxBJ,EAASC,IAAIK,KAAKjB,GAClBa,EAAaH,SAAU,CAC3B,CACJ,CACAH,EAASU,KAAKN,EAClB,CACA,OAAOJ,EACFR,KAAKmB,IACNA,EAAMN,IAAMM,EAAMN,IAAIO,MAAK,CAACC,EAAGC,IAAMD,EAAEnB,MAAMqB,cAAcD,EAAEpB,SACtD,CACHA,MAAOiB,EAAMjB,MACbW,IAAKM,EAAMN,IAAIb,KAAKe,GAAMA,EAAEb,YAG/BkB,MAAK,CAACC,EAAGC,IAAMD,EAAEnB,MAAMqB,cAAcD,EAAEpB,QAChD,C,mGC9CA,MAAMsB,EAAS,SAUf,SAASpB,EAAcd,GACnB,GAPJ,SAAkBA,GACd,OAA4C,KAArCM,EAAAA,EAAAA,GAAYN,GAAImC,UAAUC,MACrC,CAKQC,CAASrC,GACT,OAAOkC,EAEX,MAAMI,EAAiBtC,EAAGuC,QAAQ,KAClC,OAA2B,IAApBD,EAAwBtC,EAAKA,EAAGwC,MAAM,EAAGF,EACpD,CAIA,SAASG,EAAWC,GAAU,IAAAC,EAAAC,EAC1B,OAA0C,QAA1CD,EAAsC,QAAtCC,GAAOC,EAAAA,EAAAA,GAAsBH,UAAS,IAAAE,OAAA,EAA/BA,EAAiCE,UAAE,IAAAH,EAAAA,EAAID,CAClD,C","sources":["../node_modules/timezone-groups/dist/utils/time-zones.mjs","../node_modules/timezone-groups/dist/groupByRegion/index.mjs","../node_modules/timezone-groups/dist/utils/region.mjs"],"sourcesContent":["import { b as getAllTimezones, a as getTimezone } from '../chunks/index-p4VH55K1.mjs';\n\n/**\n * Handling these deprecated timezones locally until `countries-and-timezones` is updated with the latest IANA time zone db\n *\n * @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n * @see https://github.com/eggert/tz/commit/782d082623aaa130178d944bdbfbb563d2e1adfa\n * @see https://github.com/eggert/tz/commit/a0b09c0230089252acf2eb0f1ba922e99f7f4a03\n */\nconst deprecatedTimeZonesToAlias = {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    CET: 'Europe/Brussels',\n    CST6CDT: 'America/Chicago',\n    EET: 'Europe/Athens',\n    EST: 'America/Panama',\n    EST5EDT: 'America/New_York',\n    HST: 'Pacific/Honolulu',\n    MET: 'Europe/Brussels',\n    MST: 'America/Phoenix',\n    MST7MDT: 'America/Denver',\n    PST8PDT: 'America/Los_Angeles',\n    WET: 'Europe/Lisbon',\n    /* eslint-enable @typescript-eslint/naming-convention */\n};\n/**\n * List of all supported, canonical, timezones.\n */\nconst timeZones = (() => {\n    const futureDeprecatedTimeZones = Object.keys(deprecatedTimeZonesToAlias);\n    return Object.keys(getAllTimezones()).filter((tz) => !futureDeprecatedTimeZones.includes(tz));\n})();\n/**\n * Normalize an IANA timezone name to its canonical equivalent.\n */\nfunction normalize(tz) {\n    const localDeprecatedTimeZone = deprecatedTimeZonesToAlias[tz];\n    if (localDeprecatedTimeZone) {\n        return localDeprecatedTimeZone;\n    }\n    const tzData = getTimezone(tz);\n    return tzData?.aliasOf ?? tz;\n}\n\nexport { normalize, timeZones };\n","import { timeZones } from '../utils/time-zones.mjs';\nimport { extractRegion } from '../utils/region.mjs';\nimport '../chunks/index-p4VH55K1.mjs';\n\nconst generateTimeZoneMetadata = (timeZoneItems) => {\n    return timeZoneItems.map((tzItem) => {\n        const { label } = tzItem;\n        const continent = extractRegion(label);\n        return {\n            ...tzItem,\n            continent,\n        };\n    });\n};\n\nasync function groupByRegion() {\n    const grouping = [];\n    const timeZoneItems = timeZones.map((tz) => ({ label: tz }));\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems);\n    for (const tzMetadatum of timeZoneMetadata) {\n        const { label, continent } = tzMetadatum;\n        if (tzMetadatum.visited) {\n            continue;\n        }\n        tzMetadatum.visited = true;\n        const newGroup = {\n            label: continent,\n            tzs: [{ label }],\n        };\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ } = tzMetadatumJ;\n            if (continent === continentJ) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n    }\n    return grouping\n        .map((group) => {\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        return {\n            label: group.label,\n            tzs: group.tzs.map((_) => _.label),\n        };\n    })\n        .sort((a, b) => a.label.localeCompare(b.label));\n}\n\nexport { groupByRegion };\n","import { g as getCountryForTimezone, a as getTimezone } from '../chunks/index-p4VH55K1.mjs';\n\nconst global = 'Global';\n/**\n * Check if a timezone is global (no country associated).\n */\nfunction isGlobal(tz) {\n    return getTimezone(tz).countries.length === 0;\n}\n/**\n * Extract the region from a timezone.\n */\nfunction extractRegion(tz) {\n    if (isGlobal(tz)) {\n        return global;\n    }\n    const separatorIndex = tz.indexOf('/');\n    return separatorIndex === -1 ? tz : tz.slice(0, separatorIndex);\n}\n/**\n * Gets the country code for a timezone.\n */\nfunction getCountry(timeZone) {\n    return getCountryForTimezone(timeZone)?.id ?? timeZone;\n}\n\nexport { extractRegion, getCountry, global };\n"],"names":["deprecatedTimeZonesToAlias","CET","CST6CDT","EET","EST","EST5EDT","HST","MET","MST","MST7MDT","PST8PDT","WET","timeZones","futureDeprecatedTimeZones","Object","keys","getAllTimezones","filter","tz","includes","normalize","_tzData$aliasOf","localDeprecatedTimeZone","tzData","getTimezone","aliasOf","generateTimeZoneMetadata","timeZoneItems","map","tzItem","label","continent","extractRegion","_objectSpread","async","groupByRegion","grouping","timeZoneMetadata","tzMetadatum","visited","newGroup","tzs","tzMetadatumJ","_","labelJ","continentJ","push","group","sort","a","b","localeCompare","global","countries","length","isGlobal","separatorIndex","indexOf","slice","getCountry","timeZone","_getCountryForTimezon","_getCountryForTimezon2","getCountryForTimezone","id"],"sourceRoot":""}