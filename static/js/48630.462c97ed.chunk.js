"use strict";(self.webpackChunksc_depot=self.webpackChunksc_depot||[]).push([[48630],{48630:(t,e,s)=>{s.r(e),s.d(e,{default:()=>g});var i,o=s(35143),r=s(63241),a=s(42553),n=s(53084),m=s(76460),p=s(46053),u=(s(81806),s(6409)),c=s(28379),d=s(85842),l=s(17707),h=s(74916),y=s(22471);let v=i=class extends a.A{constructor(t){super(t),this.colorRamp=null,this.computeGamma=!1,this.dynamicRangeAdjustment=!1,this.gamma=[],this.maxPercent=null,this.minPercent=null,this.numberOfStandardDeviations=null,this.outputMax=null,this.outputMin=null,this.sigmoidStrengthLevel=null,this.histograms=null,this.useGamma=!1,this.stretchType="none",this.type="raster-stretch"}readColorRamp(t){if(t)return(0,y.r)(t)}get statistics(){return this._get("statistics")}set statistics(t){(0,r.Lx)(m.A.getLogger(this),"statistics",{replacement:"customStatistics",version:"4.31",warnOnce:!0}),this._set("statistics",t)}get customStatistics(){const t=this.statistics;return t&&Array.isArray(t[0])?t.map((t=>({min:t[0],max:t[1],avg:t[2],stddev:t[3]}))):t}set customStatistics(t){this._set("statistics",null===t||void 0===t?void 0:t.map((t=>{var e,s;return[t.min,t.max,null!==(e=t.avg)&&void 0!==e?e:0,null!==(s=t.stddev)&&void 0!==s?s:1]})))}readCustomStatistics(t){return null===t||void 0===t?void 0:t.map((t=>({min:t[0],max:t[1],avg:t[2],stddev:t[3]})))}writeCustomStatistics(t,e,s){(null===t||void 0===t?void 0:t.length)&&(e[s]=t.map((t=>{var e,s;return[t.min,t.max,null!==(e=t.avg)&&void 0!==e?e:0,null!==(s=t.stddev)&&void 0!==s?s:1]})))}readStretchType(t,e){let s=e.stretchType;return"number"==typeof s&&(s=h.x[s]),h.u.read(s)}clone(){const t=new i({stretchType:this.stretchType,outputMin:this.outputMin,outputMax:this.outputMax,useGamma:this.useGamma,computeGamma:this.computeGamma,gamma:(0,n.clone)(this.gamma),sigmoidStrengthLevel:this.sigmoidStrengthLevel,numberOfStandardDeviations:this.numberOfStandardDeviations,minPercent:this.minPercent,maxPercent:this.maxPercent,colorRamp:(0,n.clone)(this.colorRamp),histograms:(0,n.clone)(this.histograms),dynamicRangeAdjustment:this.dynamicRangeAdjustment});return t._set("statistics",(0,n.clone)(this.statistics)),t}};(0,o._)([(0,p.MZ)({types:y.g,json:{write:!0}})],v.prototype,"colorRamp",void 0),(0,o._)([(0,c.w)("colorRamp")],v.prototype,"readColorRamp",null),(0,o._)([(0,p.MZ)({type:Boolean,json:{write:!0}})],v.prototype,"computeGamma",void 0),(0,o._)([(0,p.MZ)({type:Boolean,json:{write:{target:"dra"},read:{source:"dra"}}})],v.prototype,"dynamicRangeAdjustment",void 0),(0,o._)([(0,p.MZ)({type:[Number],json:{write:!0}})],v.prototype,"gamma",void 0),(0,o._)([(0,p.MZ)({type:Number,json:{write:!0}})],v.prototype,"maxPercent",void 0),(0,o._)([(0,p.MZ)({type:Number,json:{write:!0}})],v.prototype,"minPercent",void 0),(0,o._)([(0,p.MZ)({type:Number,json:{write:!0}})],v.prototype,"numberOfStandardDeviations",void 0),(0,o._)([(0,p.MZ)({type:Number,json:{read:{source:"max"},write:{target:"max"}}})],v.prototype,"outputMax",void 0),(0,o._)([(0,p.MZ)({type:Number,json:{read:{source:"min"},write:{target:"min"}}})],v.prototype,"outputMin",void 0),(0,o._)([(0,p.MZ)({type:Number,json:{write:!0}})],v.prototype,"sigmoidStrengthLevel",void 0),(0,o._)([(0,p.MZ)({})],v.prototype,"statistics",null),(0,o._)([(0,p.MZ)()],v.prototype,"histograms",void 0),(0,o._)([(0,p.MZ)({json:{type:[[Number]],name:"statistics",write:!0}})],v.prototype,"customStatistics",null),(0,o._)([(0,c.w)("customStatistics")],v.prototype,"readCustomStatistics",null),(0,o._)([(0,l.K)("customStatistics")],v.prototype,"writeCustomStatistics",null),(0,o._)([(0,p.MZ)({type:Boolean,json:{write:!0}})],v.prototype,"useGamma",void 0),(0,o._)([(0,p.MZ)({type:h.u.apiValues,json:{type:h.u.jsonValues,write:h.u.write}})],v.prototype,"stretchType",void 0),(0,o._)([(0,c.w)("stretchType",["stretchType"])],v.prototype,"readStretchType",null),(0,o._)([(0,u.e)({rasterStretch:"raster-stretch"})],v.prototype,"type",void 0),v=i=(0,o._)([(0,d.$)("esri.renderers.RasterStretchRenderer")],v);const g=v},74916:(t,e,s)=>{s.d(e,{u:()=>i,x:()=>o});const i=new(s(45802).J)({none:"none",standardDeviation:"standard-deviation",histogramEqualization:"histogram-equalization",minMax:"min-max",percentClip:"percent-clip",sigmoid:"sigmoid"}),o={0:"none",3:"standardDeviation",4:"histogramEqualization",5:"minMax",6:"percentClip",9:"sigmoid"}}}]);
//# sourceMappingURL=48630.462c97ed.chunk.js.map