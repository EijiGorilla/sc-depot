"use strict";(self.webpackChunksc_depot=self.webpackChunksc_depot||[]).push([[41526],{33377:(e,t,a)=>{a.d(t,{U:()=>o});var i=a(35143),s=a(68134),r=a(46053),n=(a(81806),a(76460),a(47249),a(85842));const l="sketch-handles",o=e=>{let t=class extends e{initialize(){this.addHandles((0,s.watch)((()=>{var e;return null===(e=this.viewModel)||void 0===e?void 0:e.sketch}),(e=>{this.removeHandles(l),e&&this.addHandles([e.on("create",(e=>this.handleCreate(e))),e.on("update",(e=>this.handleUpdate(e))),e.on("undo",(e=>this.handleUndo(e))),e.on("redo",(e=>this.handleRedo(e))),e.on("delete",(e=>this.handleDelete(e))),e.on("destroy",(()=>this.handleDestroy())),e.on("duplicate",(e=>this.handleDuplicate(e))),(0,s.watch)((()=>e.activeComponent),(e=>{"draw-2d"!==(null===e||void 0===e?void 0:e.type)&&"draw-3d"!==(null===e||void 0===e?void 0:e.type)||(e.elevationLockOnVertexAddDisabled=!0)}),s.syncAndInitial)],l)}),s.syncAndInitial))}handleCreate(e){}handleUpdate(e){}handleUndo(e){}handleRedo(e){}handleDelete(e){}handleDestroy(){}handleDuplicate(e){}};return(0,i._)([(0,r.MZ)()],t.prototype,"type",void 0),(0,i._)([(0,r.MZ)()],t.prototype,"viewModel",void 0),t=(0,i._)([(0,n.$)("esri.widgets.OrientedImageryViewer.mixins.SketchHandlerMixin")],t),t}},41526:(e,t,a)=>{a.r(t),a.d(t,{default:()=>p});var i=a(35143),s=a(98773),r=a(91291),n=a(50346),l=a(46053),o=(a(81806),a(76460),a(47249),a(85842)),c=a(9624),d=a(97572),u=a(33377);let h=[],v=[],m=0,y=class extends((0,u.U)(r.A)){constructor(e){super(e),this.type="measurement",this.measurementArray=[],this.pixelMeasurement=0,this.pixelAreaMeasurement=0,this.polygonVertices=[],this._calculationTask=null,this._distanceCalculation=0,this._areaCalculation=null}initialize(){this.addResolvingPromise((0,c.load)())}async handleCreate(e){const t=e.toolEventInfo;switch(e.tool){case"polyline":this.handlePolylineEvents(e,t);break;case"polygon":this.handlePolygonEvents(e,t)}}handleDelete(e){this.resetDistanceMeasurements(),this.resetAreaMeasurements()}handleDestroy(){this.resetDistanceMeasurements(),this.resetAreaMeasurements()}cursorUpdatePolylineHandler(e){const{mode:t,activeViewer:a}=this.viewModel;if("none"===t||null===a||void 0===a||!a.imageSize)return;if("default"===t)this.measurementArray.push(e.coordinates);else{const t={x:e.coordinates[0],y:e.coordinates[1],z:e.coordinates[2]},i=(0,d.pq)(t,a.imageSize[0],a.imageSize[1]);this.measurementArray.push([i.x,i.y])}const i=v.reduce(((e,t)=>e+t),0)+this.pixelMeasurement;this.viewModel.distanceMeasurementResult=i}async cursorUpdatePolygonHandler(e){var t;const{mode:a,activeViewer:i}=this.viewModel;if("none"===a||null===i||void 0===i||!i.imageSize)return;const s=e.coordinates;if(h=[...this.polygonVertices],"default"===a)h.push(s);else{const e={x:s[0],y:s[1],z:s[2]},t=(0,d.pq)(e,null===i||void 0===i?void 0:i.imageSize[0],null===i||void 0===i?void 0:i.imageSize[1]);h.push([t.x,t.y])}if(h.length<3||!this.viewModel.currentBestFeature||null===(t=this.viewModel.activeViewer)||void 0===t||!t.imageSize)return;const r=h[0];h=h.filter(((e,t)=>0===t||t===h.length-1||JSON.stringify(e)!==JSON.stringify(r)));const n=await this._getAreaFromTask(h);(null===n||void 0===n?void 0:n.area)&&(null===n||void 0===n?void 0:n.perimeter)&&(m=n.area)}async handlePolylineEvents(e,t){var a;const i=!this.viewModel.accuracyParametersMissing;if("cancel"===e.state)return this.resetDistanceMeasurements(),this.viewModel.distanceMeasurementResult=0,this.viewModel.distanceAccuracyArray=[],void(this.viewModel.displayNewMeasurementButton=!0);if("complete"===e.state&&e.graphic)return null!==(a=this.viewModel.activeViewer)&&void 0!==a&&a.addGraphic(e.graphic),this.viewModel.measurementGraphic=e.graphic,void this.resetDistanceMeasurements();switch(null===t||void 0===t?void 0:t.type){case"cursor-update":this.cursorUpdatePolylineHandler(t);break;case"vertex-add":if(this.measurementArray.length&&i){const e=await this._getAccuracyFromTask();e&&this.viewModel.distanceAccuracyArray.push(e)}this.vertexUpdatePolylineHandler()}const s=await this._getDistanceFromTask();this.pixelMeasurement=null!==s&&void 0!==s?s:this.pixelMeasurement}async handlePolygonEvents(e,t){const a=!this.viewModel.accuracyParametersMissing;if("cancel"===e.state)return this.resetAreaMeasurements(),this.viewModel.areaMeasurementResult=0,this.viewModel.areaMeasurementAccuracy=0,void(this.viewModel.displayNewMeasurementButton=!0);if("complete"===e.state&&e.graphic){var i;if(null!==(i=this.viewModel.activeViewer)&&void 0!==i&&i.addGraphic(e.graphic),a){const e=await this._getAreaAccuracyFromTask(this.polygonVertices);this.viewModel.areaMeasurementAccuracy=e&&e>this.viewModel.areaMeasurementAccuracy?e:this.viewModel.areaMeasurementAccuracy}return this.viewModel.measurementGraphic=e.graphic,void this.resetAreaMeasurements()}switch(null===t||void 0===t?void 0:t.type){case"vertex-add":await this.vertexAddPolygonHandler(t);break;case"cursor-update":await this.cursorUpdatePolygonHandler(t)}this.viewModel.areaMeasurementResult=m>0?m:this.pixelAreaMeasurement}async vertexAddPolygonHandler(e){var t;const{mode:a,activeViewer:i}=this.viewModel,s=e.added,r=s[s.length-1];if(!Array.isArray(r)||"none"===a||null===i||void 0===i||!i.imageSize)return;if("default"===a)this.polygonVertices.push(r);else{const e={x:r[0],y:r[1],z:r[2]},t=(0,d.pq)(e,null===i||void 0===i?void 0:i.imageSize[0],null===i||void 0===i?void 0:i.imageSize[1]);this.polygonVertices.push([t.x,t.y])}if(this.polygonVertices.length<3||!this.viewModel.currentBestFeature||null===(t=this.viewModel.activeViewer)||void 0===t||!t.imageSize)return;const n=this.polygonVertices[0];this.polygonVertices=this.polygonVertices.filter(((e,t)=>0===t||t===this.polygonVertices.length-1||JSON.stringify(e)!==JSON.stringify(n)));const l=await this._getAreaFromTask(this.polygonVertices);if(null===l||void 0===l||!l.area||null===l||void 0===l||!l.perimeter)return;const{area:o}=l;this.pixelAreaMeasurement=o}vertexUpdatePolylineHandler(){this.measurementArray=this.measurementArray.slice(-1);const e=v.reduce(((e,t)=>e+t),0)+this.pixelMeasurement;this.viewModel.distanceMeasurementResult=e,this.pixelMeasurement>0&&v.push(this.pixelMeasurement)}resetDistanceMeasurements(){this.measurementArray=[],this.pixelMeasurement=0,v=[]}resetAreaMeasurements(){this.polygonVertices=[],this.pixelAreaMeasurement=0,m=0}async _getAreaFromTask(e){var t;const{mode:a}=this.viewModel;return null!==(t=this._calculationTask)&&void 0!==t&&t.abort(),this._calculationTask=(0,s.UT)((async t=>{this._areaCalculation=null;const i=await this.viewModel.calculateAreaMeasurement(e,a,t);(0,n.throwIfAborted)(t),this._areaCalculation=i})),await this._calculationTask.promise,this._areaCalculation}async _getDistanceFromTask(){var e;const{mode:t}=this.viewModel;return null!==(e=this._calculationTask)&&void 0!==e&&e.abort(),this._calculationTask=(0,s.UT)((async e=>{this._distanceCalculation=0;const a=await this.viewModel.calculateDistanceMeasurement(this.measurementArray,t,e);(0,n.throwIfAborted)(e),this._distanceCalculation=a})),await this._calculationTask.promise,this._distanceCalculation}async _getAccuracyFromTask(){var e;const{mode:t}=this.viewModel;return"none"===t?null:(null!==(e=this._calculationTask)&&void 0!==e&&e.abort(),this._calculationTask=(0,s.UT)((async e=>{this._distanceCalculation=0;const a="default"===t?await this.viewModel.calculateAccuracy(this.measurementArray,"distance",e):await this.viewModel.calculateAccuracyPanoramic(this.measurementArray,"distance",e);(0,n.throwIfAborted)(e),this._distanceCalculation=a})),await this._calculationTask.promise,this._distanceCalculation)}async _getAreaAccuracyFromTask(e){var t;const{mode:a}=this.viewModel;return"none"===a?null:(null!==(t=this._calculationTask)&&void 0!==t&&t.abort(),this._calculationTask=(0,s.UT)((async t=>{this._distanceCalculation=0;const i="default"===a?await this.viewModel.calculateAccuracy(e,"area",t):await this.viewModel.calculateAccuracyPanoramic(e,"area",t);(0,n.throwIfAborted)(t),this._distanceCalculation=i})),await this._calculationTask.promise,this._distanceCalculation)}};(0,i._)([(0,l.MZ)()],y.prototype,"type",void 0),(0,i._)([(0,l.MZ)()],y.prototype,"measurementArray",void 0),(0,i._)([(0,l.MZ)()],y.prototype,"pixelMeasurement",void 0),(0,i._)([(0,l.MZ)()],y.prototype,"pixelAreaMeasurement",void 0),(0,i._)([(0,l.MZ)()],y.prototype,"polygonVertices",void 0),y=(0,i._)([(0,o.$)("esri.widgets.OrientedImageryViewer.adapters.sketch.MeasurementAdapter")],y);const p=y}}]);
//# sourceMappingURL=41526.a984fd97.chunk.js.map