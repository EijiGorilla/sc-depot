{"version":3,"file":"static/js/76106.fad978f4.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/smartMapping/statistics/support/predominanceUtils.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{isIntegerField as n,castIntegerFieldToFloat as a}from\"../../support/utils.js\";const e=\"no_dominant_category\";function l(n){return`(${n.map((n=>`${n} >= 0`)).join(\" OR \")})`}function u(n){return{expression:r(n,{returnFieldName:!0,defaultValue:`'${e}'`})}}function r(e,l){const{returnFieldName:u,defaultValue:r,layer:t}=l,i=[];if(u&&r){const n=e.map((n=>`${n} <= 0`)).join(\" AND \");i.push(`WHEN ${n} THEN ${r}`)}for(const o of e){const l=e.reduce(((n,a)=>(o!==a&&n.push(`${o} > ${a}`),n)),[]).join(\" AND \"),r=t&&n(t,o),s=u&&`'${o}'`?`'${o}'`:r?a(o):o;i.push(`WHEN ${l} THEN ${s}`)}return`CASE ${i.join(\" \")} ELSE ${r||\"0\"} END`}function t(n,a){const e=a.join(\" + \"),u={sqlExpression:`(${e})`,sqlWhere:l(a)},t={sqlExpression:`(( (${r(a,{layer:n})}) / (${e}) ) * 100)`,sqlWhere:`${l(a)} AND ((${e}) > 0)`};return{predominantCategory:{valueExpression:s(a)},size:{valueExpression:$(a),statisticsQuery:u,histogramQuery:u},opacity:{valueExpression:V(a),statisticsQuery:t,histogramQuery:t}}}function i(n){return n&&n.map((n=>`$feature[\"${n}\"];`)).join(\"\\n\")+\"\\n\"||\"\"}function o(n,a=!1){const e=n.map((n=>`\"${n}\"`)),l=\"\\n  if(value != null && value >= 0) {\\n    if (totalValue == null) { totalValue = 0; }\\n    totalValue = totalValue + value;\\n  }\\n  \";return`\\n  var fieldNames = [ ${e.join(\", \")} ];\\n  var numFields = ${e.length};\\n  var maxValueField = null;\\n  var maxValue = -Infinity;\\n  var value, i, totalValue = null;\\n\\n  for(i = 0; i < numFields; i++) {\\n    value = $feature[fieldNames[i]];\\n\\n    if(value > 0) {\\n      if(value > maxValue) {\\n        maxValue = value;\\n        maxValueField = fieldNames[i];\\n      }\\n      else if (value == maxValue) {\\n        maxValueField = null;\\n      }\\n    }\\n    ${a?l:\"\"}\\n  }\\n  `}function s(n){const a=o(n);return`\\n  ${i(n)}\\n  ${a}\\n  return maxValueField;\\n  `}function f(n){const a=o(n);return`\\n  ${i(n)}\\n  ${a}\\n  return maxValue;\\n  `}function v(n,a){const e=m(n),l=i(e),u=n.map((n=>n.label?`\"${n.label}\"`:`\"${n.fieldName}\"`)),r=e.map((n=>`Number($feature[\"${n}\"])`)),t=[];return a&&a.forEach(((n,a)=>{t.push(`function getValueForExpr${a}() {\\n  ${n.expression} \\n}`),r.push(`Number(getValueForExpr${a}())`),u.push(`\"${n.title||n.name}\"`)})),`\\n  ${l}\\n\\n  ${t.length?t.join(\"\\n\"):\"\"}\\n\\n  var values = [ ${r.join(\", \")} ];\\n  var aliases = [ ${u.join(\", \")} ];\\n  var numValues = ${r.length};\\n  var maxValueAlias = null;\\n  var maxValue = -Infinity;\\n  var value, i, totalValue = null;\\n\\n  for(i = 0; i < numValues; i++) {\\n    value = values[i];\\n\\n    if(value > 0) {\\n      if(value > maxValue) {\\n        maxValue = value;\\n        maxValueAlias = aliases[i];\\n      }\\n      else if (value == maxValue) {\\n        maxValueAlias = \"Tie\";\\n      }\\n    }\\n  }\\n  return maxValueAlias;\\n  `}function m(n){return n.filter((({fieldName:n})=>!!n)).map((n=>n.fieldName))}function p(n){return`\\n  ${i(n)}\\n  var fieldValues = [ ${n.map((n=>`$feature[\"${n}\"]`)).join(\", \")} ];\\n  var totalValue = Sum(fieldValues);\\n  var order = Reverse(Sort(fieldValues));\\n  return IIF(totalValue > 0, Round(((order[0] - order[1]) / totalValue) * 100, 2), null);\\n  `}function $(n){const a=i(n),e=n.map((n=>`\"${n}\"`));return`\\n  ${a}\\n  var fieldNames = [ ${e.join(\", \")} ];\\n  var numFields = ${e.length};\\n  var value, i, totalValue = null;\\n\\n  for(i = 0; i < numFields; i++) {\\n    value = $feature[fieldNames[i]];\\n\\n    if(value != null && value >= 0) {\\n      if (totalValue == null) { totalValue = 0; }\\n      totalValue = totalValue + value;\\n    }\\n  }\\n\\n  return totalValue;\\n  `}function V(n){const a=o(n,!0);return`\\n  ${i(n)}\\n  ${a}\\n\\n  var strength = null;\\n\\n  if (maxValueField != null && totalValue > 0) {\\n    strength = (maxValue / totalValue) * 100;\\n  }\\n\\n  return strength;\\n  `}function c(n,a){const e=i(m(n)),l=n.map((n=>`{\\n    value: Number($feature[\"${n.fieldName}\"]),\\n    alias: \"${n.label||n.fieldName}\"\\n    }`)),u=[];return a&&a.forEach(((n,a)=>{u.push(`function getValueForExpr${a}() {\\n  ${n.expression} \\n}`),l.push(`{\\n          value: Number(getValueForExpr${a}()),\\n          alias: \"${n.title||n.name}\"\\n          }`)})),`\\n  ${e}\\n\\n  ${u.length?u.join(\"\\n\"):\"\"}\\n\\n  var groups = [ ${l.join(\", \")} ];\\n  var numTopValues = Count(groups);\\n\\n  function getValuesArray(arr){\\n    var valuesArray = []\\n    for(var i in arr){\\n      valuesArray[i] = arr[i].value;\\n    }\\n    return valuesArray;\\n  }\\n\\n  function findAliases(top5Array, fullArray){\\n    var aliases = [];\\n    var found = \"\";\\n    for(var i in top5Array){\\n      for(var k in fullArray){\\n        if(top5Array[i] == fullArray[k].value && Find(fullArray[k].alias, found) == -1){\\n          found += fullArray[k].alias;\\n          aliases[Count(aliases)] = {\\n            alias: fullArray[k].alias,\\n            value: top5Array[i]\\n          };\\n        }\\n      }\\n    }\\n    return aliases;\\n  }\\n\\n  function getTopGroups(groupsArray){\\n    var values = getValuesArray(groupsArray);\\n    var top5Values = IIF(Max(values) > 0, Top(Reverse(Sort(values)),numTopValues), \"no data\");\\n    var top5Aliases = findAliases(top5Values,groupsArray);\\n\\n    if(TypeOf(top5Values) == \"String\"){\\n      return top5Values;\\n    } else {\\n      var content = \"\";\\n      for(var i in top5Aliases){\\n        if(top5Aliases[i].value > 0){\\n          content += (i+1) + \". \" + top5Aliases[i].alias + \" (\" + Text(top5Aliases[i].value, \"#,###\") + \")\";\\n          content += IIF(i < numTopValues-1, TextFormatting.NewLine, \"\");\\n        }\\n      }\\n    }\\n\\n    return content;\\n  }\\n\\n  getTopGroups(groups);\\n  `}export{m as fieldNamesFromFieldInfos,c as getArcadeForOrderedFields,p as getArcadeForPredominanceMargin,s as getArcadeForPredominantCategory,v as getArcadeForPredominantCategoryAlias,f as getArcadeForPredominantCategoryValue,V as getArcadeForStrengthOfPredominance,$ as getArcadeForSumOfFields,t as getPredominanceExpressions,u as getSQLForPredominantCategoryName,e as noDominantCategoryField};\n"],"names":["e","l","n","concat","map","join","u","expression","r","returnFieldName","defaultValue","layer","t","i","push","o","reduce","a","s","sqlExpression","sqlWhere","predominantCategory","valueExpression","size","$","statisticsQuery","histogramQuery","opacity","V","arguments","length","undefined","f","v","m","label","fieldName","forEach","title","name","filter","_ref","p","c"],"sourceRoot":""}